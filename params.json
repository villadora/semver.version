{"name":"Semver.version","tagline":"Semver for Java","body":"SemVer java\r\n==============\r\n\r\n\r\n[![Build Status](https://travis-ci.org/villadora/semver.version.png)](https://travis-ci.org/villadora/semver.version)\r\n\r\nSemver Version Implementation in Java\r\n\r\n## Installation\r\n\r\nAdd dependency to your pom.xml\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.github.villadora</groupId>\r\n  <artifactId>semver</artifactId>\r\n  <version>0.0.1</version>\r\n</dependency>\r\n```\r\n\r\n## API\r\n\r\n### SemVer\r\n`SemVer` class used to handle normal situations, especially with strings.\r\n\r\n\r\n```java\r\n// Tell whether string is a valid version.\r\nSemVer.valid(\"2.0.1\"); // true\r\nSemVer.valid(\"v2.0.1\"); // true\r\nSemVer.valid(\"= 2.0.1\"); // true\r\n\r\n// Create Version\r\nSemVer.version(\"2.0.1\"); // return Version object\r\n\r\n// Compare two versions\r\nSemVer.compare(\"1.2.3\", \"1.2.3-0\"); // > 0\r\n\r\n// Tell whether two versions are comparable equal\r\nSemVer.eq(\"1.0.0\", \"1.0.0\"); // true\r\n\r\n// Tell whether two versions are not comparable equal\r\nSemVer.neq(\"1.2.3\", \"1.0.0\"); // true\r\n\r\n// If versionA is greater than versionB\r\nSemVer.gt(\"1.2.1\", \"1.2.0\"); // true\r\n\r\n// If versionA is greater than or equal to versionB\r\nSemVer.gte(\"1.2.1\", \"1.2.1\"); // true\r\n\r\n// If versionA is less than versionB\r\nSemVer.lt(\"1.2.1\", \"1.3.0\"); // true\r\n\r\n// If versionA is less than or equal to versionB\r\nSemVer.lte(\"1.2.1\", \"1.2.1\"); // true\r\n\r\n// Tell whether string is a valid range..\r\nSemVer.validRange(\"~2.1.0 1.2.0 - 1.3.4\"); // true\r\n\r\n// Create a Range\r\nSemVer.range(\"~2.1.0 || 3.0.x\"); // return a Range object\r\n\r\n// Whether the version is satisfies the range\r\nSemVer.satisfies(\"2.1.0-alpha\", \"~2.1.0\"); // true\r\nSemVer.satisfies(\"2.1.0-alpha\", SemVer.range(\"~2.1.0\")); // true\r\n\r\n```\r\n\r\n\r\n### Version\r\n----------------------\r\n`Version` can be constructed from a valid string or using `Version` constructors;\r\n\r\n#### Create version\r\n\r\n``` java\r\nVersion v = SemVer.version(\"1.0.0-alpha+build.2013\");\r\n// or \r\nv = new Version(\"1.0.0-alpha+build.2013\");\r\n// or\r\nv = new Version(1, 0, 0, \"alpha\", \"build.2013\");\r\n// or\r\nv = new Version(1, 0, 0, new String[]{ \"alpha\" }, new String[]{ \"build\", \"2013\" });\r\n```\r\n\r\n### Properties Getter and Setter\r\n\r\n``` java\r\nVersion v = new Version(\"1.0.0-alpha.1+build.2013\");\r\n\r\n// Getter\r\nint major = v.getMajor(); \r\nint minor = v.getMinor(); \r\nint patch = v.getPatch();\r\n\r\nString preRelease = v.getPreRelease(); // \"alpha.1\"\r\nString build      = v.getBuild();     // \"build.2013\"\r\n\r\n// Setter\r\nv.setMajor(2);\r\nv.setMinor(1);\r\nv.setPatch(0);\r\n\r\nv.setPrerelease(\"alpha\", \"1\", \"rc\"); // v.getPrerelease() will be \"alpha.1.rc\"\r\n// or\r\nv.setPrerelease(\"alpha.1.rc\");\r\n\r\nv.setBuild(\"build, \"2014\"); // v.getBuild() will be \"build.2014\"\r\n// or\r\nv.setBuild(\"build.2014\");\r\n\r\nv.toString(); // \"2.1.0-alpha.1.rc+build.2014\"\r\n```\r\n\r\n\r\n### Compare Versions\r\nThe `Version` class implements the `Comparable` interface, you can use `compareTo` to compare two versions.\r\n\r\n```java\r\nVersion v1 = new Version(\"1.2.3-alpha\");\r\nVersion v2 = new Version(\"1.2.0-beta\");\r\n\r\nv1.compareTo(v2); // > 0\r\nv1.compareTo(new Version(1, 2, 3, \"alpha\", \"build\")); // == 0\r\n\r\nv1.equals(v2); // false\r\nv1.equals(new Version(1, 2, 3, new String[] {\"alpha\"})); // true\r\nv1.equals(new Version(\"1.2.3-alpha.build\")); // false\r\n```\r\n\r\n#### Other APIs\r\n\r\n```java\r\nVersion v = new Version(\"1.2.3\");\r\nv.incrMajor(); // major will be 2\r\nv.incrMinor(); // minor will be 3\r\nv.incrPatch(); // patch will be 4\r\n\r\nVersion.valid(\"1.3.4-alpha\"); // true\r\nVersion.valid(\"1.03.4-rc\"); // false\r\n```\r\n\r\n### Ranges\r\n----------------------\r\n`Range` class represents a range space for `Versions`.\r\nRange expressions are targeting to follow the expression describes in [mojombo/semver/#113](https://github.com/mojombo/semver/issues/113). But as the specification is not settled yet, it will try to catch up with the spec. Currently, the implementation of expressions copies the rules in [isaacs/node-semver].\r\n\r\n#### Implemented Range Rules\r\nFollowing rules are implemented as description:\r\n\r\n* _Wildcard_ - `1`, `1.x`, `1.X`, `1.*`\r\n* _Tilde_ - `~1.5`\r\n* _Range_ - `1.0 - 2.0`, `1.2.3 - 1.2.4`\r\n* _Greater_ - `> 1.0`, `> 1.0.0`\r\n* _Greater Or Equal_ - `>= 1.0.0`, `>= 1`\r\n* _Less_ - `< 2.0`, `< 2.0.0`\r\n* _Less Or Equal_ - `<= 2.3.0`, `<= 1.4`\r\n* _OR_ - Use `||` to concatenate two range expressions with _OR_ operation, `~1.3.0 || ~2`\r\n* _AND_  - Use one space ` ` to concatenate two range expressions with _AND_ operation, `~1.3 1.4.5 1.0-2.0``\r\n* _Parenthesized_ - The sequence or _OR_/_AND_ rules can be ordered by parentheses, `~1.3 | (1.0.0-1.4.5 ~1.5) | ~2`\r\n\r\n\r\n#### Range APIs\r\n\r\n```java\r\nRange r = SemVer.range(\"~1.2.0\");\r\n// or \r\nr = Range.valueOf(\"~1.2.0\");\r\n\r\n// whether a version satisfies the range\r\nrange.satisfies(\"1.2.1-alpha\"); // true\r\n// or\r\nrange.satisfies(new Version(\"1.2.1-alpha\")); // true\r\n\r\n// Find out the max version satisfies the range, return null if none is found.\r\nVersion v =  r.maxSatisfying(new Version(\"1.2.0\"), new Version(\"1.2.2\")); // return new Version(\"1.2.2\");\r\n// or \r\nv =  r.maxSatisfying(\"1.2.0\", \"1.2.2\", \"1.2.1\"); // return new Version(\"1.2.2\");\r\n// or \r\nv = r.maxSatisfying(List or Versions);\r\n\r\n// Return true if the version is outside the bounds of the range in either the high or low direction.\r\nr.outside(new Version(\"0.0.1\")); // true\r\n// or \r\nr.outside(\"1.3.0\"); // true\r\n\r\n// Return true if any of versions that in the range is greater than version\r\nr.greater(new Version(\"1.1.2\"));\r\n// or\r\nr.greater(\"1.1.2\");\r\n\r\n\r\n// Return true if any of versions that in the range is less than version\r\nr.less(new Version(\"1.3.2\"));\r\n// or\r\nr.less(\"1.3.2\");\r\n\r\n```\r\n\r\n## License\r\n\r\n(The MIT License)\r\n","google":"UA-7622998-4","note":"Don't delete this file! It's used internally to help with page regeneration."}